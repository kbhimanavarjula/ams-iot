{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "westus2",
            "allowedValues": [
                "northeurope",
                "southcentralus",
                "southeastasia",
                "westeurope",
                "westus2",
                "eastus",
                "eastus2",
                "australiasoutheast",
                "centralus",
                "canadacentral"
            ],
            "metadata": {
                "description": "specify the region for where the complete solution will deploy"
            }
        },
        "solutionType": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "core solution",
                "core solution with monitoring",
                "core and hardening",
                "core and hardening with monitoring"
            ],
            "metadata": {
                "description": "1.core solution will launch the ams core components 2.core solution with monitoring will launch the core components with monitoring 3.core and hardening will launch the high availability solution 4.core and hardening with monitoring will launch the high avialabity solution with monitoring"
            }
        },
        "locationDr": {
            "type": "string",
            "defaultValue": "centralus",
            "allowedValues": [
                "eastasia",
                "centralus",
                "northcentralus",
                "brazilsouth",
                "australiaeast",
                "southindia",
                "westindia",
                "canadaeast",
                "ukwest",
                "koreacentral"
            ],
            "metadata": {
                "description": "if you select core and hardening or core and hardening with monitoring specify the desaster recovery region for webapps and azure sqlserver,cosmos Db desaster recovary it should be different of resource group region"
            }
        },
        "sqlAdministratorLogin": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The admin user of the SQL Server"
            }
        },
        "sqlAdministratorLoginPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The password of the admin user of the SQL Server"
            }
        },
        "webSiteName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Describes Web Site name which should be unique"
            }
        },
        "webSiteNameDr": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Describes Web Site name which should be unique for recovery app"
            }
        },
        "AdSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Subscription ID of your Azure AD tenant"
            }
        },
        "AdTenantId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Tenant ID of Azure AD"
            }
        },
        "AdClientId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Client ID of Azure AD application"
            }
        },
        "AdSecretKey": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Secret Key of Azure AD application"
            }
        },
        "b2cTenant": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Describes B2C Tenant Name Directory"
            }
        },
        "b2cClientId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Describes the client Id registered with B2C Directory"
            }
        },
        "b2cSignUpSignInPolicyId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Describes the B2C Sign Up-Sign In policy"
            }
        },
        "b2cNativeRedirectURL": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Describes the B2C redirect URL for the Native Client"
            }
        },
        "b2cNativeRedirectURLDr": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "if you select costing model 4 specify b2cNativeRedirectURL describes the B2C redirect URL for the Native Client of disaster recovery web application"
            }
        },
        "webSiteTrafficManagerName": {
            "type": "string",
            "defaultValue": "amstrafficmanag",
            "metadata": {
                "description": "Describes Web Site trafficmaanger name it should be same as the customdomain name prefix of certifacate of website if ypu select core solution or core solution with monitoring in solution type this value is optional"
            }
        },
        "apiServerTrafficManagerName": {
            "type": "string",
            "defaultValue": "apitraffic",
            "metadata": {
                "description": "Describes apiserver trafficmaanger name it should be same as the customdomain name prefix of certifacate of apiserver if ypu select core solution or core solution with monitoring in solution type this value is optional"
            }
        },
        "nodeServerTrafficManagerName": {
            "type": "string",
            "defaultValue": "nodetm",
            "metadata": {
                "description": "Describes nodeserver trafficmaanger name it should be same as the customdomain name prefix of certifacate of apiserver if ypu select core solution or core solution with monitoring in solution type this value is optional"
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "keyvaultams",
            "metadata": {
                "description": "Existing Key Vault name with an access policy to allow Microsoft.Web RP to read Key Vault secrets"
            }
        },
        "keyVaultwebAppSecretName": {
            "type": "string",
            "defaultValue": "appcerte1c3d5a4-8ab4-4f4d-9b9b-e01cdbed56ad",
            "metadata": {
                "description": "Describes the keyvault secret name of webapp certificate if you select core solution or core solution with monitoring in solution type this value is optional"
            }
        },
        "keyVaultApiServerSecretName": {
            "type": "string",
            "defaultValue": "restapicertd6cef351-b84b-47c2-9738-b691174e8430",
            "metadata": {
                "description": "Describes the keyvault secret name of webapp certificate if you select core solution or core solution with monitoring in solution type this value is optional"
            }
        },
        "keyVaultNodeServerSecretName": {
            "type": "string",
            "defaultValue": "nodecert42a91461-d156-4e78-beb5-1dd1cd7ec298",
            "metadata": {
                "description": "Describes the keyvault secret name of webapp certificate if you select core solution or core solution with monitoring in solution type this value is optional"
            }
        },
        "webAppCertificatethumbPrint": {
            "type": "string",
            "defaultValue": "780E6E6A2D4EC1711E8DCDA8CE25B0979D6965AA",
            "metadata": {
                "description": "Describes the webapp certificate thumbprint if you select core solution or core solution with monitoring in solution type this value is optional"
            }
        },
        "apiServerCertificatethumbPrint": {
            "type": "string",
            "defaultValue": "0B0DC2F1490A0ECC4D574C52450EC6B9DB369C57",
            "metadata": {
                "description": "Describes the apiserver certificate thumbprint if you select core solution or core solution with monitoring in solution type this value is optional"
            }
        },
        "nodeServerCertificatethumbPrint": {
            "type": "string",
            "defaultValue": "B1E952AC324D370E2580119FE1CBF9C15A5DAD50",
            "metadata": {
                "description": "Describes the nodeserver certificate thumbprint if you select core solution or core solution with monitoring in solution type this value is optional"
            }
        }
    },
    "variables": {
        "webJobStorage": {
            "location": "[variables('location')]",
            "locationDr": "[parameters('locationDr')]",
            "webjobStorageName": "[concat('myperstr', uniqueString(resourceGroup().id))]",
            "webjobStorageType": "Standard_LRS",
            "storageApiVersion": "2015-06-15"
        },
        "selectedRegion": "[parameters('location')]",
        "southeastasia": "southeastasia",
        "westeurope": "westeurope",
        "eastus": "eastus",
        "eastus2": "eastus",
        "westus2": "eastus",
        "australiasoutheast": "eastus",
        "centralus": "eastus",
        "canadacentral": "eastus",
        "northeurope": "westeurope",
        "southcentralus": "eastus",
        "documentDB": {
            "location": "[variables('location')]",
            "DocDBAccountName": "[variables('DocDBAccountName')]",
            "offerType": "Standard",
            "DocDBName": "AssetTrackingDB",
            "DocDBGroupGpsCollection": "GroupGpsData",
            "DocDBSensorCollection": "SensorData",
            "DocDBOfferThroughput": "400",
            "readRegionLocation": "[parameters('locationDr')]",
            "documentDBAuthKey": "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('DocDBAccountName'))]"
        },
        "hostingPlan": {
            "location": "[variables('location')]",
            "hostingPlanName": "[concat('appSerPlan', variables('suffix'))]",
            "locationDr": "[parameters('locationDr')]",
            "hostingPlanNameDr": "[concat('appSerPlanDr', variables('suffix'))]",
            "webSkuName": "S1",
            "webSkuName1": "B1",
            "skuCapacity": 1
        },
        "webApp": {
            "location": "[variables('location')]",
            "webSiteName": "[parameters('webSiteName')]",
            "webSiteNameDr": "[parameters('webSiteNameDr')]",
            "locationDr": "[parameters('locationDr')]",
            "WebAppPackageURI": "https://projectiot.blob.core.windows.net/ams-iot/webappsAppinsightsCode/webapp_appins511.zip",
            "WebAppPackageURI1": "https://projectiot.blob.core.windows.net/ams-iot/AMSLatestcode/webapp.zip",
            "BlobconnectionString": "[variables('BlobconnectionString')]",
            "WebAppPackageURI2": "https://projectiot.blob.core.windows.net/ams-iot/TrafficManagerCode/WebApp_TM.zip",
            "WebAppPackageURI3": "https://projectiot.blob.core.windows.net/ams-iot/TrafficManagerCode/webapp_appinsTM.zip",
            "websiteFullAddress": "[concat('https://',parameters('webSiteName'),'.azurewebsites.net/')]",
            "websiteFullAddress1": "[concat('https://',parameters('webSiteTrafficManagerName'),'.trafficmanager.net/')]"
        },
        "restServer": {
            "location": "[variables('location')]",
            "apiServerName": "[concat('apiserverams',variables('suffix'))]",
            "apiServerNameDr": "[concat('recoveryapiserver',variables('suffix'))]",
            "locationDr": "[parameters('locationDr')]",
            "RESTServerPackageURI": "https://projectiot.blob.core.windows.net/ams-iot/webappsAppinsightsCode/RestServer_appins511.zip",
            "RESTServerPackageURI1": "https://projectiot.blob.core.windows.net/ams-iot/AMSLatestcode/AMSRestServerV2.zip",
            "BlobconnectionString": "[variables('BlobconnectionString')]",
            "RESTServerPackageURI2": "https://projectiot.blob.core.windows.net/ams-iot/TrafficManagerCode/RestServer_TM.zip",
            "RESTServerPackageURI3": "https://projectiot.blob.core.windows.net/ams-iot/TrafficManagerCode/RestServer_appinsTM.zip",
            "WindowsManagementUri": "https://management.core.windows.net/",
            "ReportJobName": "TestJob",
            "alertJobTable": "Alerts",
            "ADEndpoint": "https://login.windows.net/",
            "AdSubscriptionId": "[parameters('AdSubscriptionId')]",
            "AdTenantId": "[parameters('AdTenantId')]",
            "AdClientId": "[parameters('AdClientId')]",
            "AdSecretKey": "[parameters('AdSecretKey')]",
            "JobResourceGroup": "[resourceGroup().name]"
        },
        "nodeServer": {
            "location": "[variables('location')]",
            "locationDr": "[parameters('locationDr')]",
            "nodeServerName": "[concat('nodeserverams',variables('suffix'))]",
            "nodeServerNameDr": "[concat('recoverynodeserver',variables('suffix'))]",
            "NodeServerPackageURI": "https://projectiot.blob.core.windows.net/ams-iot/webappsAppinsightsCode/node_appins419.zip",
            "NodeServerPackageURI1": "https://projectiot.blob.core.windows.net/ams-iot/AMSLatestcode/nodeserver419.zip",
            "BlobconnectionString": "[variables('BlobconnectionString')]"
        },
        "appInsights": {
            "appInsightsLocation": "[variables(variables('selectedRegion'))]",
            "appInsightsApiVersion": "2014-04-01",
            "appInsightResourceName": "[concat('AppInsights', uniquestring(resourceGroup().id))]"
        },
        "sqlServer": {
            "location": "[variables('location')]",
            "sqlserverName": "[variables('sqlserverName')]",
            "databaseConnString": "[concat('Server=tcp:',variables('sqlFailoverGroupName'),'.database.windows.net;initial catalog=',variables('sqldatabasename'),';persist security info=True;user id=',parameters('sqlAdministratorLogin'),';password=',parameters('sqlAdministratorLoginPassword'),';MultipleActiveResultSets=True;Encrypt=True;TrustServerCertificate=False;')]",
            "databaseConnString1": "[concat('Server=tcp:',variables('sqlserverName'),'.database.windows.net;initial catalog=',variables('sqldatabasename'),';persist security info=True;user id=',parameters('sqlAdministratorLogin'),';password=',parameters('sqlAdministratorLoginPassword'),';MultipleActiveResultSets=True;Encrypt=True;TrustServerCertificate=False;')]",
            "sqlServerAddress": "[concat('tcp:',variables('sqlFailoverGroupName'),'.database.windows.net')]",
            "sqlServerAddress1": "[concat('tcp:',variables('sqlserverName'),'.database.windows.net')]",
            "sqldatabasename": "[variables('sqldatabasename')]",
            "sqlAdministratorLogin": "[parameters('sqlAdministratorLogin')]",
            "recoverySqlAuthenticationLogin": "[parameters('sqlAdministratorLogin')]",
            "sqlAdministratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
            "recoverySqlAuthenticationPassword": "[parameters('sqlAdministratorLoginPassword')]",
            "storageKeyType": "SharedAccessKey",
            "storageKey": "?",
            "sqlFailoverGroupName": "[concat('azuresqlfailover', uniqueString(resourceGroup().id))]",
            "recoveryServerName": "[concat('recoverysqlserver', uniqueString(resourceGroup().id))]",
            "sqlDBApiVersion": "2014-04-01-preview",
            "locationDr": "[parameters('locationDr')]",
            "sqlServerApiVersion": "2015-05-01-preview",
            "maxSizeBytes": "2147483648",
            "requestedServiceObjectiveName": "Basic",
            "edition": "Basic",
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "bacpacUri": "https://projectiot.blob.core.windows.net/ams-iot/AMSLatestcode/AssetMonitoring.bacpac",
            "DeployStorageAccountKey": "[variables('DeployStorageAccountKey')]"
        },
        "omsSettings": {
            "omsWorkspaceName": "[concat('omswsams', variables('suffix'))]",
            "omsWorkspaceRegion": "[variables(variables('selectedRegion'))]",
            "omsAutomationAccountName": "[concat('autoupdateams', variables('suffix'))]",
            "dataRetention": 7,
            "omsApiVersion": "2015-03-20",
            "omsDataApiVersion": "2015-11-01-preview",
            "omsLogAnalyticsSku": "Standalone",
            "omsEnableApiVersion": "2015-07-01"
        },
        "eventHub": {
            "location": "[variables('location')]",
            "namespaceName": "[variables('namespaceName')]",
            "eventHubName": "[variables('eventHubName')]",
            "eventHubSku": "Standard",
            "defaultSASKeyName": "[variables('defaultSASKeyName')]",
            "eventhubNamepaceResourceID": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('namespaceName'), variables('defaultSASKeyName'))]",
            "primaryKey": "[variables('primaryKey')]",
            "secondaryKey": "[variables('secondaryKey')]",
            "eventhubConnectionString": "[concat('Endpoint=sb://', variables('namespaceName'), '.servicebus.windows.net/;SharedAccessKeyName=EventHubOwner;SharedAccessKey=', variables('primaryKey'))]"
        },
        "iotHub": {
            "location": "[variables('location')]",
            "skuName": "S1",
            "capacityUnits": 1,
            "iotHubKeyName": "[variables('iotHubKeyName')]",
            "iotHubName": "[variables('iotHubName')]",
            "iotHubHostName": "[concat(variables('iotHubName'),'.azure-devices.net')]",
            "iotHubID": "[resourceId('Microsoft.Devices/IotHubs/Iothubkeys', variables('iotHubName'), variables('iotHubKeyName'))]",
            "d2cConsumerGroupName": "congrp_"
        },
        "trafficManagerSettings": {
            "trafficManagerApiVersion": "2017-05-01",
            "trafficManagerName": "[parameters('webSiteTrafficManagerName')]",
            "trafficRoutingMethod": "Priority",
            "trafficManagerName1": "[parameters('apiServerTrafficManagerName')]",
            "trafficManagerName2": "[parameters('nodeServerTrafficManagerName')]"
        },
        "B2CVariables": {
            "b2cAadInstance": "https://login.microsoftonline.com/{0}/v2.0/.well-known/openid-configuration?p={1}",
            "MobileTokenURL": "https://login.microsoftonline.com/{0}/oauth2/v2.0/token?p={1}&amp;grant_type=authorization_code&amp;client_id={2}&amp;code={3}",
            "MobileInstanceUrl": "https://login.microsoftonline.com/{0}/oauth2/v2.0/authorize?p={1}&amp;client_id={2}&amp;response_type=code&amp;redirect_uri={3}&amp;response_mode=query&amp;scope=openid&amp;state=arbitrary_data_you_can_receive_in_the_response",
            "b2cTenant": "[parameters('b2cTenant')]",
            "b2cClientId": "[parameters('b2cClientId')]",
            "b2cSignUpSignInPolicyId": "[parameters('b2cSignUpSignInPolicyId')]",
            "b2cNativeRedirectURL": "[parameters('b2cNativeRedirectURL')]",
            "b2cNativeRedirectURLDr": "[parameters('b2cNativeRedirectURLDr')]",
            "AlertJobConsumerGroupPrefix": "congrp_"
        },
        "certifacatesBinding": {
            "existingAppLocation": "[variables('location')]",
            "existingAppLocationDr": "[parameters('locationDr')]",
            "customHostname": "[concat(parameters('webSiteTrafficManagerName'),'.trafficmanager.net')]",
            "customHostname2": "[concat(parameters('apiServerTrafficManagerName'),'.trafficmanager.net')]",
            "customHostname3": "[concat(parameters('nodeServerTrafficManagerName'),'.trafficmanager.net')]",
            "keyVaultName": "[parameters('keyVaultName')]",
            "hostingPlanName": "[concat('appSerPlan', variables('suffix'))]",
            "hostingPlanNameDr": "[concat('appSerPlanDr', variables('suffix'))]",
            "keyVaultSecretName1": "[parameters('keyVaultwebAppSecretName')]",
            "keyVaultSecretName2": "[parameters('keyVaultApiServerSecretName')]",
            "keyVaultSecretName3": "[parameters('keyVaultNodeServerSecretName')]",
            "webSiteName": "[parameters('webSiteName')]",
            "webSiteNameDr": "[parameters('webSiteNameDr')]",
            "nodeServerName": "[concat('nodeserverams',variables('suffix'))]",
            "nodeServerNameDr": "[concat('recoverynodeserver',variables('suffix'))]",
            "apiServerName": "[concat('apiserverams',variables('suffix'))]",
            "apiServerNameDr": "[concat('recoveryapiserver',variables('suffix'))]",
            "apiVersion": "2016-03-01",
            "thumbPrint1": "[parameters('webAppCertificatethumbPrint')]",
            "thumbPrint2": "[parameters('apiServerCertificatethumbPrint')]",
            "thumbPrint3": "[parameters('nodeServerCertificatethumbPrint')]"
        },
        "DocDBAccountName": "[concat(toLower(variables('databaseAccountNamePrefix')),variables('suffix'))]",
        "databaseAccountNamePrefix": "docdb",
        "sqlFailoverGroupName": "[concat('azuresqlfailover', uniqueString(resourceGroup().id))]",
        "eventHubName": "[concat('eventhub',variables('suffix'))]",
        "suffix": "[substring(uniqueString(resourceGroup().id), 0, 5)]",
        "primaryKey": "[concat(uniqueString(variables('namespaceName'), resourceGroup().Id, 'primaryKey'),'3VZcT2e5NfVeSFvTuiYUiWtXhxnJ2s=')]",
        "secondaryKey": "[concat(uniqueString(variables('namespaceName'), resourceGroup().Id, 'secondaryKey'),'F9NRSV78nYomDlFjsz21X9aVKPL4Eo=')]",
        "BlobconnectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('DeployStorageAccountName'),';AccountKey=',variables('DeployStorageAccountKey'))]",
        "PowerGridEntities": "[concat('metadata=res://*/Entities.PowergridModel.csdl|res://*/Entities.PowergridModel.ssdl|res://*/Entities.PowergridModel.msl;provider=System.Data.SqlClient;provider connection string=\"data source=',variables('sqlFailoverGroupName'),'.database.windows.net;initial catalog=',variables('sqldatabasename'),';persist security info=True;user id=',parameters('sqlAdministratorLogin'),';password=',parameters('sqlAdministratorLoginPassword'),';multipleactiveresultsets=True;application name=EntityFramework\"')]",
        "PowerGridEntities1": "[concat('metadata=res://*/Entities.PowergridModel.csdl|res://*/Entities.PowergridModel.ssdl|res://*/Entities.PowergridModel.msl;provider=System.Data.SqlClient;provider connection string=\"data source=',variables('sqlserverName'),'.database.windows.net;initial catalog=',variables('sqldatabasename'),';persist security info=True;user id=',parameters('sqlAdministratorLogin'),';password=',parameters('sqlAdministratorLoginPassword'),';multipleactiveresultsets=True;application name=EntityFramework\"')]",
        "iotHubName": "[concat('iothubams',variables('suffix'))]",
        "iotHubKeyName": "iothubowner",
        "DeployStorageAccountName": "projectiot",
        "DeployStorageAccountKey": "68qPHnikzAitr3fjvPAyem7Tc0y2pf+BVob4F+opoX20PhV0yJGQc/guxxhCV/Uscp0gE1EHn+GCGfwOiaF9tg==",
        "SasToken": "?",
        "sqldatabasename": "amssqldb",
        "subId": "[subscription().subscriptionId]",
        "rgName": "[resourceGroup().name]",
        "location": "[parameters('location')]",
        "sqlserverName": "[concat('sqlserver', uniqueString(resourceGroup().id))]",
        "namespaceName": "[concat('namespace',uniqueString(resourceGroup().id))]",
        "defaultSASKeyName": "RootManageSharedAccessKey",
        "deploymentApiVersion": "2016-02-01",
        "baseUrl": "https://raw.githubusercontent.com/sysgain/ams-iot/AmsStandardTraffic/"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "name": "DocumentDB",
            "condition": "[or(equals(parameters('solutionType'),'core solution'), equals(parameters('solutionType'),'core solution with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/doc-db.json','?token=AYpAeImsbfemKE2drbTIl2JSsl0IY0xFks5bGNU2wA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "documentDB": {
                        "value": "[variables('documentDB')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "DocumentDBGeo",
            "condition": "[or(equals(parameters('solutionType'),'core and hardening'), equals(parameters('solutionType'),'core and hardening with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/docdb-geo.json','?token=AYpAeBW24cYMElTR0_QTdDkf61_N0ypmks5bGNU4wA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "documentDB": {
                        "value": "[variables('documentDB')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "StorageSetup",
            "condition": "[or(equals(parameters('solutionType'),'core and hardening'), equals(parameters('solutionType'),'core and hardening with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/storage-account.json','?token=AYpAeFlbTzim-18ZnzTh06OmheHlmGHQks5bGNYYwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "webJobStorage": {
                        "value": "[variables('webJobStorage')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "DocumentDBOMS",
            "condition": "[or(equals(parameters('solutionType'),'core solution with monitoring'), equals(parameters('solutionType'),'core and hardening with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "OMSWorkSpace",
                "DocumentDB",
                "DocumentDBGeo"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/docdb-oms.json','?token=AYpAeJw6W2defcfp4YFuHDRqm8Khlpw0ks5bGNU7wA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "documentDB": {
                        "value": "[variables('documentDB')]"
                    },
                    "omsSettings": {
                        "value": "[variables('omsSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "OMSWorkSpace",
            "condition": "[or(equals(parameters('solutionType'),'core solution with monitoring'), equals(parameters('solutionType'),'core and hardening with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/oms-workspace.json','?token=AYpAeAOfLGiUTrbUYD-FHYlLn1-NTgsFks5bGNYPwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "omsSettings": {
                        "value": "[variables('omsSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "IotHubOMS",
            "condition": "[or(equals(parameters('solutionType'),'core solution with monitoring'), equals(parameters('solutionType'),'core and hardening with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "OMSWorkSpace"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/iothub-oms.json','?token=AYpAeOUjuYwHs6fTC_0MJVlST7N9c1KTks5bH4_RwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "iotHub": {
                        "value": "[variables('iotHub')]"
                    },
                    "omsSettings": {
                        "value": "[variables('omsSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "IotHub",
            "condition": "[or(equals(parameters('solutionType'),'core solution'), equals(parameters('solutionType'),'core and hardening'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/iot-hub.json','?token=AYpAeHDBzfphp0mpDgG6XLkP8IDCzO2-ks5bGNVBwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "iotHub": {
                        "value": "[variables('iotHub')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "EventHub",
            "condition": "[or(equals(parameters('solutionType'),'core solution'), equals(parameters('solutionType'),'core and hardening'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/eventhub.json','?token=AYpAeBVm8yYbWBrnyrQFmoLu1RqiWc0Yks5bGNU_wA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "eventHub": {
                        "value": "[variables('eventHub')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "EventHubOMS",
            "condition": "[or(equals(parameters('solutionType'),'core solution with monitoring'), equals(parameters('solutionType'),'core and hardening with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "OMSWorkSpace"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/event-huboms.json','?token=AYpAeLebaDiYVjdl7em176rHZxxvyUGzks5bGNU9wA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "eventHub": {
                        "value": "[variables('eventHub')]"
                    },
                    "omsSettings": {
                        "value": "[variables('omsSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "SqlServeroms",
            "condition": "[equals(parameters('solutionType'),'core solution with monitoring')]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "OMSWorkSpace"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/sql-server.json','?token=AYpAeCciOszcK9CcRyRoSpKNY5sXAq_iks5bGNYRwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    },
                    "omsSettings": {
                        "value": "[variables('omsSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "SqlServer",
            "condition": "[equals(parameters('solutionType'),'core solution')]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/sqlserver-outmonitor.json','?token=AYpAeFI57CE98PkQ-XfTVLU9gLVS_WNbks5bGNYXwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "SqlServerGeoOms",
            "condition": "[equals(parameters('solutionType'),'core and hardening with monitoring')]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "OMSWorkSpace"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/sqlgeo-monitor.json','?token=AYpAeEyLg8fWveUdfZ2vo0YlrXfEpitpks5bGNYTwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    },
                    "omsSettings": {
                        "value": "[variables('omsSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "SqlServerGeo",
            "condition": "[equals(parameters('solutionType'),'core and hardening')]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/sqlgeo-outmonitor.json','?token=AYpAeOB1xsY0xf_asysvffUK6CyX2vBSks5bGNYVwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "AppInsights",
            "condition": "[or(equals(parameters('solutionType'),'core solution with monitoring'), equals(parameters('solutionType'),'core and hardening with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "OMSWorkSpace"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/app-insights.json','?token=AYpAeLAg7gDRRVOsg_EAke5T8SoNTy3Oks5bGNU0wA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appInsights": {
                        "value": "[variables('appInsights')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "WebAppsOutMonitor",
            "condition": "[equals(parameters('solutionType'),'core solution')]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "DocumentDB",
                "IotHub",
                "EventHub",
                "SqlServer"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/webapps-outmonitor.json','?token=AYpAeE-AraiaZ79_pEePuEEBY0FgIHfYks5bGXPPwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "hostingPlan": {
                        "value": "[variables('hostingPlan')]"
                    },
                    "restServer": {
                        "value": "[variables('restServer')]"
                    },
                    "webApp": {
                        "value": "[variables('webApp')]"
                    },
                    "webJobStorage": {
                        "value": "[variables('webJobStorage')]"
                    },
                    "iotHub": {
                        "value": "[variables('iotHub')]"
                    },
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    },
                    "eventHub": {
                        "value": "[variables('eventHub')]"
                    },
                    "B2CVariables": {
                        "value": "[variables('B2CVariables')]"
                    },
                    "documentDB": {
                        "value": "[variables('documentDB')]"
                    },
                    "nodeServer": {
                        "value": "[variables('nodeServer')]"
                    },
                    "documentDBEndpoint": {
                        "value": "[concat('https://',variables('documentDB').DocDBAccountName,'.documents.azure.com:443/')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "WebAppsMonitor",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "condition": "[equals(parameters('solutionType'),'core solution with monitoring')]",
            "dependsOn": [
                "DocumentDBOMS",
                "DocumentDB",
                "IotHubOMS",
                "EventHubOMS",
                "SqlServeroms",
                "OMSWorkSpace"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/webapps-monitor.json','?token=AYpAeCoDg2imcN9H7i5JqbVqInerl8__ks5bGXOiwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appInsights": {
                        "value": "[variables('appInsights')]"
                    },
                    "hostingPlan": {
                        "value": "[variables('hostingPlan')]"
                    },
                    "restServer": {
                        "value": "[variables('restServer')]"
                    },
                    "webApp": {
                        "value": "[variables('webApp')]"
                    },
                    "webJobStorage": {
                        "value": "[variables('webJobStorage')]"
                    },
                    "iotHub": {
                        "value": "[variables('iotHub')]"
                    },
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    },
                    "eventHub": {
                        "value": "[variables('eventHub')]"
                    },
                    "B2CVariables": {
                        "value": "[variables('B2CVariables')]"
                    },
                    "documentDB": {
                        "value": "[variables('documentDB')]"
                    },
                    "nodeServer": {
                        "value": "[variables('nodeServer')]"
                    },
                    "omsSettings": {
                        "value": "[variables('omsSettings')]"
                    },
                    "documentDBEndpoint": {
                        "value": "[concat('https://',variables('documentDB').DocDBAccountName,'.documents.azure.com:443/')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "WebAppsOutMonitorha",
            "condition": "[equals(parameters('solutionType'),'core and hardening')]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "DocumentDBGeo",
                "IotHub",
                "EventHub",
                "SqlServerGeo",
                "StorageSetup"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/webappsha-outmonitor.json','?token=AYpAeBdThgNEWxA2ncQ8szNjSiPNLyiJks5bGNRHwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "hostingPlan": {
                        "value": "[variables('hostingPlan')]"
                    },
                    "restServer": {
                        "value": "[variables('restServer')]"
                    },
                    "webApp": {
                        "value": "[variables('webApp')]"
                    },
                    "webJobStorage": {
                        "value": "[variables('webJobStorage')]"
                    },
                    "iotHub": {
                        "value": "[variables('iotHub')]"
                    },
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    },
                    "eventHub": {
                        "value": "[variables('eventHub')]"
                    },
                    "B2CVariables": {
                        "value": "[variables('B2CVariables')]"
                    },
                    "documentDB": {
                        "value": "[variables('documentDB')]"
                    },
                    "nodeServer": {
                        "value": "[variables('nodeServer')]"
                    },
                    "documentDBEndpoint": {
                        "value": "[concat('https://',variables('documentDB').DocDBAccountName,'.documents.azure.com:443/')]"
                    },
                    "trafficManagerSettings": {
                        "value": "[variables('trafficManagerSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "WebAppsMonitorha",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "condition": "[equals(parameters('solutionType'),'core and hardening with monitoring')]",
            "dependsOn": [
                "DocumentDBOMS",
                "DocumentDBGeo",
                "IotHubOMS",
                "EventHubOMS",
                "SqlServerGeoOms",
                "OMSWorkSpace",
                "StorageSetup"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/webappsha-monitor.json','?token=AYpAePWZ-6cY4F3PbYLcGH5vJIu_0SyXks5bGNRNwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appInsights": {
                        "value": "[variables('appInsights')]"
                    },
                    "hostingPlan": {
                        "value": "[variables('hostingPlan')]"
                    },
                    "restServer": {
                        "value": "[variables('restServer')]"
                    },
                    "webApp": {
                        "value": "[variables('webApp')]"
                    },
                    "webJobStorage": {
                        "value": "[variables('webJobStorage')]"
                    },
                    "iotHub": {
                        "value": "[variables('iotHub')]"
                    },
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    },
                    "eventHub": {
                        "value": "[variables('eventHub')]"
                    },
                    "B2CVariables": {
                        "value": "[variables('B2CVariables')]"
                    },
                    "documentDB": {
                        "value": "[variables('documentDB')]"
                    },
                    "nodeServer": {
                        "value": "[variables('nodeServer')]"
                    },
                    "omsSettings": {
                        "value": "[variables('omsSettings')]"
                    },
                    "documentDBEndpoint": {
                        "value": "[concat('https://',variables('documentDB').DocDBAccountName,'.documents.azure.com:443/')]"
                    },
                    "trafficManagerSettings": {
                        "value": "[variables('trafficManagerSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "WebAppsDrOutMonitorha",
            "condition": "[equals(parameters('solutionType'),'core and hardening')]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "DocumentDBGeo",
                "IotHub",
                "EventHub",
                "SqlServerGeo",
                "StorageSetup"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/webappsha-droutmonitor.json','?token=AYpAePOh-j51VtgX2Yo3bf90piS-tndrks5bGNRPwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "hostingPlan": {
                        "value": "[variables('hostingPlan')]"
                    },
                    "restServer": {
                        "value": "[variables('restServer')]"
                    },
                    "webApp": {
                        "value": "[variables('webApp')]"
                    },
                    "webJobStorage": {
                        "value": "[variables('webJobStorage')]"
                    },
                    "iotHub": {
                        "value": "[variables('iotHub')]"
                    },
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    },
                    "eventHub": {
                        "value": "[variables('eventHub')]"
                    },
                    "B2CVariables": {
                        "value": "[variables('B2CVariables')]"
                    },
                    "documentDB": {
                        "value": "[variables('documentDB')]"
                    },
                    "nodeServer": {
                        "value": "[variables('nodeServer')]"
                    },
                    "documentDBEndpoint": {
                        "value": "[concat('https://',variables('documentDB').DocDBAccountName,'.documents.azure.com:443/')]"
                    },
                    "trafficManagerSettings": {
                        "value": "[variables('trafficManagerSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "WebAppsDrMonitorha",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "condition": "[equals(parameters('solutionType'),'core and hardening with monitoring')]",
            "dependsOn": [
                "DocumentDBOMS",
                "DocumentDBGeo",
                "IotHubOMS",
                "EventHubOMS",
                "SqlServerGeoOms",
                "OMSWorkSpace",
                "StorageSetup"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/webappsha-drmonitor.json','?token=AYpAeKnvrRMj81cQnjjsOVNSRzI3hwVIks5bH14jwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appInsights": {
                        "value": "[variables('appInsights')]"
                    },
                    "hostingPlan": {
                        "value": "[variables('hostingPlan')]"
                    },
                    "restServer": {
                        "value": "[variables('restServer')]"
                    },
                    "webApp": {
                        "value": "[variables('webApp')]"
                    },
                    "webJobStorage": {
                        "value": "[variables('webJobStorage')]"
                    },
                    "iotHub": {
                        "value": "[variables('iotHub')]"
                    },
                    "sqlServer": {
                        "value": "[variables('sqlServer')]"
                    },
                    "eventHub": {
                        "value": "[variables('eventHub')]"
                    },
                    "B2CVariables": {
                        "value": "[variables('B2CVariables')]"
                    },
                    "documentDB": {
                        "value": "[variables('documentDB')]"
                    },
                    "nodeServer": {
                        "value": "[variables('nodeServer')]"
                    },
                    "omsSettings": {
                        "value": "[variables('omsSettings')]"
                    },
                    "documentDBEndpoint": {
                        "value": "[concat('https://',variables('documentDB').DocDBAccountName,'.documents.azure.com:443/')]"
                    },
                    "trafficManagerSettings": {
                        "value": "[variables('trafficManagerSettings')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "TrafficManagerApps",
            "condition": "[or(equals(parameters('solutionType'),'core and hardening'), equals(parameters('solutionType'),'core and hardening with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "WebAppsDrMonitorha",
                "WebAppsMonitorha",
                "WebAppsDrOutMonitorha",
                "WebAppsOutMonitorha"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/traffic-manager.json','?token=AYpAeNLuiK_qQwHdVyYOgiH7F_Dh7wCPks5bGNYawA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "webApp": {
                        "value": "[variables('webApp')]"
                    },
                    "trafficManagerSettings": {
                        "value": "[variables('trafficManagerSettings')]"
                    },
                    "restserver": {
                        "value": "[variables('restServer')]"
                    },
                    "nodeServer": {
                        "value": "[variables('nodeServer')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "certificatesBinding",
            "condition": "[or(equals(parameters('solutionType'),'core and hardening'), equals(parameters('solutionType'),'core and hardening with monitoring'))]",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "WebAppsDrMonitorha",
                "WebAppsMonitorha",
                "WebAppsDrOutMonitorha",
                "WebAppsOutMonitorha",
                "TrafficManagerApps"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('baseUrl'), 'nested/certificates-binding.json','?token=AYpAeP6Izx-omwTwQjh0rcg88_eAthsIks5bIKXcwA%3D%3D')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "certifacatesBinding": {
                        "value": "[variables('certifacatesBinding')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "azureSQLUsername": {
            "type": "string",
            "value": "[parameters('sqlAdministratorLogin')]"
        },
        "azureSqlPassword": {
            "type": "string",
            "value": "Enter the sqlAdministratorLoginPassword which you have enetered in parameter section while deploying the template."
        },
        "sqlServerEndPoint": {
            "type": "string",
            "value": "[concat(variables('sqlServer').sqlserverName,'.database.windows.net')]"
        },
        "SqlDatabasename": {
            "type": "string",
            "value": "[variables('sqldatabasename')]"
        },
        "WebAppUrl": {
            "type": "string",
            "value": "[concat('https://',variables('webApp').webSiteName,'.azurewebsites.net/')]"
        },
        "apiServerUrl": {
            "type": "string",
            "value": "[concat('https://',variables('restServer').apiServerName,'.azurewebsites.net/')]"
        },
        "NodeServerUrl": {
            "type": "string",
            "value": "[concat('https://',variables('nodeServer').nodeServerName,'.azurewebsites.net/')]"
        },
        "WebAppTrafficManagerUrl": {
            "type": "string",
            "value": "[concat('https://',parameters('webSiteTrafficManagerName'),'.trafficmanager.net/')]"
        },
        "apiServerTrafficManagerUrl": {
            "type": "string",
            "value": "[concat('https://',parameters('apiServerTrafficManagerName'),'.trafficmanager.net/')]"
        },
        "nodeServerTrafficManagerUrl": {
            "type": "string",
            "value": "[concat('https://',parameters('nodeServerTrafficManagerName'),'.trafficmanager.net/')]"
        },
        "DocumentDBName": {
            "type": "string",
            "value": "[variables('documentDB').DocDBName]"
        },
        "DocumentDBUrl": {
            "type": "string",
            "value": "[concat('https://',variables('documentDB').DocDBAccountName,'.documents.azure.com:443/')]"
        },
        "DocumentDBCollectionName": {
            "type": "string",
            "value": "[variables('documentDB').DocDBSensorCollection]"
        },
        "appInsightsUrl": {
            "type": "string",
            "value": "[concat('https://analytics.applicationinsights.io/subscriptions/',variables('subId'),'/resourcegroups/',variables('rgName'),'/components/',variables('appInsights').appInsightResourceName,'#/')]"
        }
    }
}
